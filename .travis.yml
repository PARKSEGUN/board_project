language: java
jdk:
  - openjdk8

branches:
  only:
    - main #오직 main 브랜치에서 push 될때만

# Travis CI 서버의 Home
#Gradle을 통해 의존성을 받게 되면 이를 해당 디렉토리에 캐시하여, 같은 의존성은 다음 배포때부터 다시 받지 않도록 설정합니다.
cache:
  directories:
    - '$HOME/.m2/repository'
    - '$HOME/.gradle'


#master 브랜치에 PUSH 되었을때 수행하는 명령어입니다.
#여기선 프로젝트 내부에 둔 gradlew을 통해 clean & build 를 수행합니다
before_install:
  - chmod +x gradlew
script:
  - ./gradlew clean build

before_deploy: #전체 정보를 zip으로 압축하는 것이 아닌 필요한 정보만 골라서 압축하기위한 설정
  - mkdir -p before-deploy # travis에서 S3로 특정파일만 업로드는 불가하기때문에 항상 디렉토리 생성 zip에 포함시킬 파일들을 담을 디렉토리 생성
  - cp scripts/*.sh before-deploy/
  - cp appspec.yml before-deploy/
  - cp build/libs/*.jar before-deploy/
  - cd before-deploy && zip -r before-deploy * # before-deploy로 이동후 전체 압축
  - cd ../ && mkdir -p deploy # 상위 디렉토리로 이동후 deploy 디렉토리 생성
  - mv before-deploy/before-deploy.zip deploy/springboot-webservice.zip # deploy로 zip파일 이동 #만들어놓은 deploy폴더로  before-deploy/before-deploy.zip파일 이동


deploy:
  - provider: s3
    access_key_id: $AWS_ACCESS_KEY #Travis Repo에 설정된값
    secret_access_key: $AWS_SECRET_KEY
    bucket: springboot-webservice-deploy #만들어놓은 S3 버킷
    region: ap-northeast-2
    skip_cleanup: true
    acl: private
    local_dir: deploy
    wait-until-deployed: true
    on:
      branch: main #깃의 default 값은 master이기때문에 all_branches로 모든 브런치에게 권한 허용

  - provider: codedeploy
    access_key_id: $AWS_ACCESS_KEY # Travis repo settings에 설정된 값
    secret_access_key: $AWS_SECRET_KEY # Travis repo settings에 설정된 값
    bucket: springboot-webservice-deploy # S3 버킷
    key: springboot-webservice.zip # 빌드 파일을 압축해서 전달
    bundle_type: zip
    application: springboot-webservice # 웹 콘솔에서 등록한 CodeDeploy 어플리케이션
    deployment_group: springboot-webservice-group # 웹 콘솔에서 등록한 CodeDeploy 배포 그룹
    region: ap-northeast-2
    wait-until-deployed: true
    on:
      branch: main



# CI 실행 완료시 메일로 알람
notifications:
  email:
    recipients:
      - qkrtprjs456@gmail.com


#배포 자동화 구성 8차